import requests,json,datetime,csv,time
data=list()
address=list()
date_object = str(datetime.date.today())#timestamp-after
i=int(date_object[-1:])
date=(date_object).replace(date_object[-1:],str(i-1))
defiswap_list=['Pancake v2', 'Mdex', 'Pancake', 'BakerySwap', 'ApeSwap', 'SwapLiquidity', 'CoinSwap', '1inch Liquidity Protocol', 'StreetSwap', 'Mochi', 'Anyswap', 'BSCSwap', 'Uranium', 'Uniswap', 'SushiSwap', 'Balancer', 'Bancor Network', 'Curve', 'Zerox Exchange', 'Dodo', '1inch', 'dYdX', '1inch Liquidity Protocol', 'Kyber Network', 'Matcha', 'CRO DeFi Swap', 'AirSwap', 'SakeSwap', 'Bamboo Relay', 'Mooniswap', 'Cream Pool Token', 'IDEX', 'CellSwap', 'EtherDelta', 'SingularX', 'Miniswap', 'TokenTrove', 'Cofix', 'TacoSwap', 'FFFSwap', 'SwapX', 'LedgerDex', 'ZeusSwap', 'BestSwap', 'HiSwap']
j=0
def Swap():
    global j
    while(j<=len(defiswap_list)):
        time.sleep(6)
        bsc="(network: bsc)"
        eth=""
        query = """{
            ethereum"""+(bsc if j <= 12 else eth)+"""{
                dexTrades(
                options: {desc: "count"}
                date: {in: """+'"'+date+'"'+"""}
                exchangeName: {is: """+'"'+defiswap_list[j]+'"'+"""}
                ) {
      quotePrice
      count
      tradeAmount(in: USD)
      baseCurrency {
        address
        symbol
      }
      quoteCurrency {
        address
        symbol
      }
      smartContract {
        address {
          address
        }
      }
    }
  }
 }"""     
        url = 'https://graphql.bitquery.io'
        try:
          fields = ['Exchange', 'Pair', 'Price', 'Volume',"Address"]
          r = requests.post(url, json={'query': query} ,timeout=6)
          if r:
            json_data = json.loads(r.text)
            parced =json_data["data"]["ethereum"]["dexTrades"]
            print(j)
            for i in parced:
                data.append([defiswap_list[j],i["baseCurrency"]["symbol"]+"/"+i["quoteCurrency"]["symbol"],i["quotePrice"],i["tradeAmount"],i["smartContract"]["address"]["address"]]) 
          else:
              print(defiswap_list[j],"no data")
              pass
        except requests.Timeout as err:
            print(err)
            Swap()
        j+=1
    with open('defilist', 'w', encoding="utf-8") as f:
                  write = csv.writer(f)  
                  write.writerow(fields)
                  write.writerows(data)  
Swap()
